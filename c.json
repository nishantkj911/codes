{
  // Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Printf without vars Statement": {
    "prefix": "pr",
    "body": ["printf(\"$1\\n\");$0"],
    "description": "Expand the printf statement"
  },

  "Printf with 1 var Statement": {
    "prefix": "pr1",
    "body": ["printf(\"$1%i$3\\n\", $2);$0"],
    "description": "Expand the printf statement"
  },

  "Printf with 2 vars Statement": {
    "prefix": "pr2",
    "body": ["printf(\"$1%i$3%i$5\\n\", $2, $4);$0"],
    "description": "Expand the printf statement"
  },

  "Printf with 3 vars Statement": {
    "prefix": "pr3",
    "body": ["printf(\"$1%i$3%i$5%i\\n\", $2, $4, $6);$0"],
    "description": "Expand the printf statement"
  },

  "For loop": {
    "prefix": "fo",
    "body": [
      "for (${1:int} ${2:i} = ${3:0}; ${2:i} ${4:<} ${5:n}; ${2:i}${6:++})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Expanding the for loop"
  },

  "scanf with 1 var Statement": {
    "prefix": "sc",
    "body": ["scanf(\"%${1:i}\", &${2:n});"],
    "description": "Expand the scanf statement for 1 variable"
  },

  "scanf with 2 vars Statement": {
    "prefix": "sc2",
    "body": ["scanf(\"%${1:i} %${3:i}\", &${2:n1}, &${4:n2});$0"],
    "description": "Expand the scanf statement for 2 variables"
  },

  "scanf with 3 vars Statement": {
    "prefix": "sc3",
    "body": [
      "scanf(\"%${1:i} %${3:i} %${5:i}\", &${2:n1}, &${4:n2}, &${6:n3});$0"
    ],
    "description": "Expand the scanf statement for 3 variables"
  },

  "include stdio and stdlib": {
    "prefix": "#i",
    "body": ["#include <stdio.h>", "#include <stdlib.h>"],
    "description": "Automatically include stdio and stdlib header files"
  },

  "Define function": {
    "prefix": "def",
    "body": ["${1:void} ${2:functionName}(${4:int} $5)", "{", "\t$0", "}"]
  },

  "Exit failure": {
    "prefix": "exf",
    "body": ["exit(EXIT_FAILURE);"]
  },

  "Exit success": {
    "prefix": "exs",
    "body": ["exit(EXIT_SUCCESS);"]
  },

  "Print or take input of an array": {
    "prefix": "prarr",
    "body": [
      "for (int i = 0; i < ${1:n}; i++)",
      "{",
      "\t${2:print}f(\"%i${3: }\", ${4:arr}[i]);",
      "}",
      "${5:printf(\"\\n\");}",
      "$0"
    ]
  },

  "Initialise an array": {
    "prefix": "arri",
    "body": "int *${1:arr} = calloc(${2:n}, sizeof(int));$0"
  },

  "main code snippet": {
    "prefix": "main",
    "body": [
      "int main(int argc, char const *argv[])",
      "{",
      "\t$0",
      "\treturn 0;",
      "}"
    ]
  },

  "Initialise a matrix": {
    "prefix": "mati",
    "body": [
      "int **${1:mat} = calloc(${2:r}, sizeof(${3:int*}));",
      "for (int i = 0; i < ${2:r}; i++)",
      "{",
      "\t${1:mat}[i] = calloc(${4:c}, sizeof(${5:int}));",
      "\t$0",
      "}"
    ]
  },

  "print a matrix": {
    "prefix": "prmat",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:r}; ${1:i}++)",
      "{",
      "\tfor (int ${3:j} = 0; ${3:j} < ${4:c}; ${3:j}++)",
      "\t{",
      "\t\tprintf(\"%${5:i} \", ${6:mat}[${1:i}][${3:j}];",
      "\t}",
      "\tprintf(\"\\n\");",
      "}",
      "$0"
    ]
  }
}
